//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderTool.QRService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DicomQRItem", Namespace="http://schemas.datacontract.org/2004/07/WcfDicomQRContract")]
    [System.SerializableAttribute()]
    public partial class DicomQRItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<uint, string> TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<uint, string> Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DicomQRNode", Namespace="http://schemas.datacontract.org/2004/07/WcfDicomQRContract")]
    [System.SerializableAttribute()]
    public partial class DicomQRNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ArtimTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint MaxPDULenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MovetoAETitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QSCPAETitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QSCPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QSCUAETitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ReceiveTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint SendTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort ServicePortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ArtimTimeout {
            get {
                return this.ArtimTimeoutField;
            }
            set {
                if ((this.ArtimTimeoutField.Equals(value) != true)) {
                    this.ArtimTimeoutField = value;
                    this.RaisePropertyChanged("ArtimTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint MaxPDULen {
            get {
                return this.MaxPDULenField;
            }
            set {
                if ((this.MaxPDULenField.Equals(value) != true)) {
                    this.MaxPDULenField = value;
                    this.RaisePropertyChanged("MaxPDULen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MovetoAETitle {
            get {
                return this.MovetoAETitleField;
            }
            set {
                if ((object.ReferenceEquals(this.MovetoAETitleField, value) != true)) {
                    this.MovetoAETitleField = value;
                    this.RaisePropertyChanged("MovetoAETitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QSCPAETitle {
            get {
                return this.QSCPAETitleField;
            }
            set {
                if ((object.ReferenceEquals(this.QSCPAETitleField, value) != true)) {
                    this.QSCPAETitleField = value;
                    this.RaisePropertyChanged("QSCPAETitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QSCPAddress {
            get {
                return this.QSCPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.QSCPAddressField, value) != true)) {
                    this.QSCPAddressField = value;
                    this.RaisePropertyChanged("QSCPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QSCUAETitle {
            get {
                return this.QSCUAETitleField;
            }
            set {
                if ((object.ReferenceEquals(this.QSCUAETitleField, value) != true)) {
                    this.QSCUAETitleField = value;
                    this.RaisePropertyChanged("QSCUAETitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ReceiveTimeout {
            get {
                return this.ReceiveTimeoutField;
            }
            set {
                if ((this.ReceiveTimeoutField.Equals(value) != true)) {
                    this.ReceiveTimeoutField = value;
                    this.RaisePropertyChanged("ReceiveTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint SendTimeout {
            get {
                return this.SendTimeoutField;
            }
            set {
                if ((this.SendTimeoutField.Equals(value) != true)) {
                    this.SendTimeoutField = value;
                    this.RaisePropertyChanged("SendTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort ServicePort {
            get {
                return this.ServicePortField;
            }
            set {
                if ((this.ServicePortField.Equals(value) != true)) {
                    this.ServicePortField = value;
                    this.RaisePropertyChanged("ServicePort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QRService.IDicomQR")]
    public interface IDicomQR {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/GetNodeNames", ReplyAction="http://tempuri.org/IDicomQR/GetNodeNamesResponse")]
        string[] GetNodeNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/GetNodeNames", ReplyAction="http://tempuri.org/IDicomQR/GetNodeNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetNodeNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyFind", ReplyAction="http://tempuri.org/IDicomQR/StudyFindResponse")]
        OrderTool.QRService.DicomQRItem[] StudyFind(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyFind", ReplyAction="http://tempuri.org/IDicomQR/StudyFindResponse")]
        System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> StudyFindAsync(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesFind", ReplyAction="http://tempuri.org/IDicomQR/SeriesFindResponse")]
        OrderTool.QRService.DicomQRItem[] SeriesFind(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesFind", ReplyAction="http://tempuri.org/IDicomQR/SeriesFindResponse")]
        System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> SeriesFindAsync(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageFind", ReplyAction="http://tempuri.org/IDicomQR/ImageFindResponse")]
        OrderTool.QRService.DicomQRItem[] ImageFind(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageFind", ReplyAction="http://tempuri.org/IDicomQR/ImageFindResponse")]
        System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> ImageFindAsync(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyMove", ReplyAction="http://tempuri.org/IDicomQR/StudyMoveResponse")]
        bool StudyMove(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyMove", ReplyAction="http://tempuri.org/IDicomQR/StudyMoveResponse")]
        System.Threading.Tasks.Task<bool> StudyMoveAsync(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesMove", ReplyAction="http://tempuri.org/IDicomQR/SeriesMoveResponse")]
        bool SeriesMove(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesMove", ReplyAction="http://tempuri.org/IDicomQR/SeriesMoveResponse")]
        System.Threading.Tasks.Task<bool> SeriesMoveAsync(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageMove", ReplyAction="http://tempuri.org/IDicomQR/ImageMoveResponse")]
        bool ImageMove(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageMove", ReplyAction="http://tempuri.org/IDicomQR/ImageMoveResponse")]
        System.Threading.Tasks.Task<bool> ImageMoveAsync(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyFindEx", ReplyAction="http://tempuri.org/IDicomQR/StudyFindExResponse")]
        OrderTool.QRService.DicomQRItem[] StudyFindEx(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyFindEx", ReplyAction="http://tempuri.org/IDicomQR/StudyFindExResponse")]
        System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> StudyFindExAsync(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesFindEx", ReplyAction="http://tempuri.org/IDicomQR/SeriesFindExResponse")]
        OrderTool.QRService.DicomQRItem[] SeriesFindEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesFindEx", ReplyAction="http://tempuri.org/IDicomQR/SeriesFindExResponse")]
        System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> SeriesFindExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageFindEx", ReplyAction="http://tempuri.org/IDicomQR/ImageFindExResponse")]
        OrderTool.QRService.DicomQRItem[] ImageFindEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageFindEx", ReplyAction="http://tempuri.org/IDicomQR/ImageFindExResponse")]
        System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> ImageFindExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyMoveEx", ReplyAction="http://tempuri.org/IDicomQR/StudyMoveExResponse")]
        bool StudyMoveEx(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/StudyMoveEx", ReplyAction="http://tempuri.org/IDicomQR/StudyMoveExResponse")]
        System.Threading.Tasks.Task<bool> StudyMoveExAsync(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesMoveEx", ReplyAction="http://tempuri.org/IDicomQR/SeriesMoveExResponse")]
        bool SeriesMoveEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/SeriesMoveEx", ReplyAction="http://tempuri.org/IDicomQR/SeriesMoveExResponse")]
        System.Threading.Tasks.Task<bool> SeriesMoveExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageMoveEx", ReplyAction="http://tempuri.org/IDicomQR/ImageMoveExResponse")]
        bool ImageMoveEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/ImageMoveEx", ReplyAction="http://tempuri.org/IDicomQR/ImageMoveExResponse")]
        System.Threading.Tasks.Task<bool> ImageMoveExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/Echo", ReplyAction="http://tempuri.org/IDicomQR/EchoResponse")]
        int Echo(string NodeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/Echo", ReplyAction="http://tempuri.org/IDicomQR/EchoResponse")]
        System.Threading.Tasks.Task<int> EchoAsync(string NodeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/EchoEx", ReplyAction="http://tempuri.org/IDicomQR/EchoExResponse")]
        int EchoEx(OrderTool.QRService.DicomQRNode Node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDicomQR/EchoEx", ReplyAction="http://tempuri.org/IDicomQR/EchoExResponse")]
        System.Threading.Tasks.Task<int> EchoExAsync(OrderTool.QRService.DicomQRNode Node);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDicomQRChannel : OrderTool.QRService.IDicomQR, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DicomQRClient : System.ServiceModel.ClientBase<OrderTool.QRService.IDicomQR>, OrderTool.QRService.IDicomQR {
        
        public DicomQRClient() {
        }
        
        public DicomQRClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DicomQRClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DicomQRClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DicomQRClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetNodeNames() {
            return base.Channel.GetNodeNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetNodeNamesAsync() {
            return base.Channel.GetNodeNamesAsync();
        }
        
        public OrderTool.QRService.DicomQRItem[] StudyFind(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyFind(NodeName, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> StudyFindAsync(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyFindAsync(NodeName, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public OrderTool.QRService.DicomQRItem[] SeriesFind(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesFind(NodeName, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> SeriesFindAsync(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesFindAsync(NodeName, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public OrderTool.QRService.DicomQRItem[] ImageFind(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageFind(NodeName, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> ImageFindAsync(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageFindAsync(NodeName, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public bool StudyMove(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyMove(NodeName, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public System.Threading.Tasks.Task<bool> StudyMoveAsync(string NodeName, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyMoveAsync(NodeName, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public bool SeriesMove(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesMove(NodeName, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public System.Threading.Tasks.Task<bool> SeriesMoveAsync(string NodeName, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesMoveAsync(NodeName, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public bool ImageMove(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageMove(NodeName, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public System.Threading.Tasks.Task<bool> ImageMoveAsync(string NodeName, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageMoveAsync(NodeName, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public OrderTool.QRService.DicomQRItem[] StudyFindEx(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyFindEx(Node, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> StudyFindExAsync(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyFindExAsync(Node, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public OrderTool.QRService.DicomQRItem[] SeriesFindEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesFindEx(Node, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> SeriesFindExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesFindExAsync(Node, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public OrderTool.QRService.DicomQRItem[] ImageFindEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageFindEx(Node, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public System.Threading.Tasks.Task<OrderTool.QRService.DicomQRItem[]> ImageFindExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageFindExAsync(Node, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public bool StudyMoveEx(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyMoveEx(Node, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public System.Threading.Tasks.Task<bool> StudyMoveExAsync(OrderTool.QRService.DicomQRNode Node, string PatientsName, string PatientID, string StudyDate, string AccessionNumber, string StudyID, string StudyInstanceUID, string ModalitiesinStudy) {
            return base.Channel.StudyMoveExAsync(Node, PatientsName, PatientID, StudyDate, AccessionNumber, StudyID, StudyInstanceUID, ModalitiesinStudy);
        }
        
        public bool SeriesMoveEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesMoveEx(Node, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public System.Threading.Tasks.Task<bool> SeriesMoveExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string Modality, string SeriesNumber, string SeriesInstanceUID) {
            return base.Channel.SeriesMoveExAsync(Node, StudyInstanceUID, Modality, SeriesNumber, SeriesInstanceUID);
        }
        
        public bool ImageMoveEx(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageMoveEx(Node, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public System.Threading.Tasks.Task<bool> ImageMoveExAsync(OrderTool.QRService.DicomQRNode Node, string StudyInstanceUID, string SeriesInstanceUID, string SOPInstanceUID) {
            return base.Channel.ImageMoveExAsync(Node, StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID);
        }
        
        public int Echo(string NodeName) {
            return base.Channel.Echo(NodeName);
        }
        
        public System.Threading.Tasks.Task<int> EchoAsync(string NodeName) {
            return base.Channel.EchoAsync(NodeName);
        }
        
        public int EchoEx(OrderTool.QRService.DicomQRNode Node) {
            return base.Channel.EchoEx(Node);
        }
        
        public System.Threading.Tasks.Task<int> EchoExAsync(OrderTool.QRService.DicomQRNode Node) {
            return base.Channel.EchoExAsync(Node);
        }
    }
}
